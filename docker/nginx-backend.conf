events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=1000r/s;
    limit_req_zone $binary_remote_addr zone=slow:10m rate=10r/s;

    # Upstream for load balancing (if needed)
    upstream backend {
        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
        server 127.0.0.1:8083;
    }

    server {
        listen 80;
        server_name localhost;

        # Health check endpoint
        location /health {
            add_header Content-Type application/json;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","service":"backend"}';
        }

        # Users API
        location /users {
            limit_req zone=api burst=20 nodelay;
            
            # Simulate database query time
            set $delay 50;
            if ($request_method = POST) {
                set $delay 100;
            }
            if ($request_method = PUT) {
                set $delay 80;
            }
            if ($request_method = DELETE) {
                set $delay 30;
            }
            
            # Add random delay to simulate real-world conditions
            set $random_delay $delay;
            if ($arg_slow) {
                set $random_delay 500;
            }
            
            # Simulate response
            add_header Content-Type application/json;
            add_header X-Response-Time $request_time;
            
            # Return realistic user data
            return 200 '{
                "id": 123,
                "name": "John Doe",
                "email": "john@example.com",
                "created_at": "$time_iso8601",
                "status": "active"
            }';
        }

        # Products API
        location /products {
            limit_req zone=api burst=30 nodelay;
            
            # Simulate product catalog query
            set $delay 30;
            if ($request_method = POST) {
                set $delay 150;
            }
            
            add_header Content-Type application/json;
            add_header X-Response-Time $request_time;
            
            # Return realistic product data
            return 200 '{
                "id": 456,
                "name": "Sample Product",
                "price": 29.99,
                "category": "electronics",
                "in_stock": true,
                "created_at": "$time_iso8601"
            }';
        }

        # Orders API
        location /orders {
            limit_req zone=api burst=10 nodelay;
            
            # Simulate order processing
            set $delay 200;
            if ($request_method = GET) {
                set $delay 80;
            }
            
            add_header Content-Type application/json;
            add_header X-Response-Time $request_time;
            
            # Return realistic order data
            return 200 '{
                "id": 789,
                "user_id": 123,
                "total": 59.98,
                "status": "processing",
                "items": [
                    {"product_id": 456, "quantity": 2, "price": 29.99}
                ],
                "created_at": "$time_iso8601"
            }';
        }

        # Metrics endpoint
        location /metrics {
            add_header Content-Type text/plain;
            return 200 '# HELP http_requests_total Total number of HTTP requests
# TYPE http_requests_total counter
http_requests_total{method="GET",status="200"} 1234
http_requests_total{method="POST",status="201"} 567
http_requests_total{method="PUT",status="200"} 89
http_requests_total{method="DELETE",status="204"} 12';
        }

        # Error simulation endpoints
        location /error/500 {
            return 500 '{"error":"Internal Server Error","message":"Simulated error"}';
        }

        location /error/404 {
            return 404 '{"error":"Not Found","message":"Resource not found"}';
        }

        location /error/timeout {
            # Simulate timeout
            proxy_pass http://127.0.0.1:9999;
        }

        # Slow endpoint for testing
        location /slow {
            limit_req zone=slow burst=5 nodelay;
            
            # Simulate slow database query
            set $delay 2000;
            if ($arg_delay) {
                set $delay $arg_delay;
            }
            
            add_header Content-Type application/json;
            return 200 '{"message":"Slow response","delay":"$delay ms"}';
        }

        # Default response
        location / {
            add_header Content-Type application/json;
            return 200 '{"message":"Backend service is running","timestamp":"$time_iso8601"}';
        }
    }
} 